
	use BCS
	implicit none
! 	Nucleus, filled using MO_module
	type(Nucleon), dimension(:,:), allocatable :: nucleus
! 	Variables used for analytic solution
	COMPLEX(8) ::   WW(2*N_tot,2*N_tot),A(N_tot,N_tot),B(N_tot,N_tot),&
			C(N_tot,N_tot),WWD(2*N_tot,2*N_tot),WW2(2*24,2*24),&
			Pf2,WW22(2*24,2*24),&
			U_N(N_tot,N_tot),V_N(N_tot,N_tot),U_Z(N_tot,N_tot),V_Z(N_tot,N_tot)

	complex(kind=qp) :: Pf22,Pf
	real(kind=qp) 	:: prod,factor,factor2

	Integer 	:: Ipiv(2*N_tot,2),Ipiv2(2*24,2),Ipiv22(2*24,2),Ipiv3(4,2)

	REAL(8) 	:: scaleFactor(7)

	! Nbr of neutrons/protons and loop integer(s),
	integer :: i,j
	integer :: N,Z,siz,step

!-------Analytical solution using BCS-equations

	step=1000 	! Nbr of points in \lambda vector
	N=24		! Number of NEUTRONS to find
	Z=24 		! Number of PROTONS to find
	tol=0.001	! tolerance to find root

	allocate(nucleus(N_tot,2),EV_N(N_tot,2),EV_Z(N_tot,2))

	call nucleus_creator(N,Z,nucleus)

	scaleFactor = (/0.5d0,0.75d0,1.d0,1.75d0,2.5d0,3d0,4d0/)

	do i=1,7
		call analytic_solve_sweep(nucleus,N,Z,step,tol,&
			EV_N,lam_sN,EV_Z,lam_sZ,scaleFactor(i))
		V_N_tot(:,i) = EV_N(:,2) 	! Contains all v_i^2 
	end do

	U=0;V=0;prod=1;prod2=1;
	do i=1,N_tot,2
		Theta_N(i,:)=(/  (0.5*dacos(-1.d0+2*V_N_tot(i,j)), j=1,7) /)
		Theta_N(i+1,:)=(/  (0.5*dacos(-1.d0+2*V_N_tot(i+1,j)), j=1,7) /)

		if(i+1<=24) then
			prod2=prod2*V_N_tot(i,3)
		end if

		U(i,i)=cmplx(dsin(theta_N(i,3)),0,8)
		U(i+1,i+1)=cmplx(dsin(theta_N(i,3)),0,8)
		if(i+1<=N_tot) then
			prod=prod*V_N_tot(i,3)
			V(i,i+1)=cmplx(dcos(theta_N(i,3)),0,8)
			V(i+1,i)=cmplx(-1*dcos(theta_N(i,3)),0,8)
		end if
		!write(*,*) i, real(U(i,i)), real(V(i,i+1))
	end do
	!write(*,*) real(V(N_tot,N_tot-1)), real(V(N_tot-1,N_tot))
	!write(*,*) Theta_N(330,3), dcos(Theta_N(330,3)) 
	write(*,*) 'Prod (=Pf)', prod
	write(*,*) 'Prod2 (=Pf2)', prod2

	WW2(1:24,1:24) = A(1:24,1:24)
	WW2(24+1:2*24,1:24) = -C(1:24,1:24)
	WW2(1:24,24+1:2*24) = C(1:24,1:24)
	WW2(24+1:2*24,24+1:2*24) = B(1:24,1:24)
	
	WW22=WW2

	open(unit=1,file='data/WW.dat',status='replace')
	open(unit=2,file='data/WWD.dat',status='replace')
	open(unit=3,file='data/A.dat',status='replace')
	open(unit=4,file='data/B.dat',status='replace')
	open(unit=5,file='data/U.dat',status='replace')
	open(unit=6,file='data/V.dat',status='replace')

	WWD=WW+transpose(WW)

	do i=1,2*N_tot
		do j=1,2*N_tot
			if(.not.(abs(WW(i,j))<1.d-5)) then 
				write(1,"(2I5,F18.12)") j,2*N_tot+1-1*i,real(WW(i,j),8) 
			end if

			if(i<=2*24 .and. j<=2*24) then
				if(.not.(abs(WW2(i,j))<1.d-3)) then 
					write(2,"(2I5,F18.12)") j,2*24+1-1*i,real(WW2(i,j),8)
				end if
			end if
			if (i<=N_tot .and. j<=N_tot) then
				if(.not.(abs(A(i,j))<1.d-3)) then 
					!write(3,"(2I5)") j,N_tot+1-1*i
					write(3,"(2I5,F17.12)") j,N_tot+1-1*i, real(A(i,j),8) 
				end if
				if(.not.(abs(B(i,j))<1.d-3)) then 
					write(4,"(2I5)") j,N_tot+1-1*i 
				end if
				if(.not.(abs(U(i,j))<1.d-3)) then 
					write(5,"(2I5,2I5,F18.12)") j,N_tot+1-1*i,i,j,real(U(i,j),8) 
				end if
				if(.not.(abs(V(i,j))<1.d-3)) then 
					write(6,"(2I5,2I5,F18.12)") j,N_tot+1-1*i,i,j,real(V(i,j),8) 
				end if 
			end if 
		end do
	end do
	factor=1
	Pf=overlap_pfaffian(factor,N_tot,N_tot,N_tot,U,U,V,V)
	!call ZPfaffian_EXT(WW,2*N_tot,2*N_tot,Ipiv,Pf)
	call ZPfaffianF(WW2,2*24,2*24,Ipiv2,Pf2)

	call ZPfaffian_EXT(WW22,2*24,2*24,Ipiv22,Pf22)
	
	write(*,*)
	factor2=factor**(N_tot/2)
	write(*,*) 'Pf*factor: ', real(Pf)
	write(*,*) 'factor2: ', real(factor2)
	write(*,*) 'Pf/factor2: ', real(Pf/factor2)
	write(*,*)
	write(*,*) 'Pf2: ', real(Pf2)
	write(*,*) 'Pf22: ', real(Pf22)

	close(unit=1)
	close(unit=2)
	close(unit=3)
	close(unit=4)
	close(unit=5)
	close(unit=6)
	deallocate(nucleus,EV_N)




!--------------------------------------------------------------------------------------------------------------------------
		write(prod_str,'(ES43.36)') prod_test
		!prod_str=prod_str(1:18)//'E'//prod_str(index(prod_str(3:len(prod_str)),'-')+2:len_trim(prod_str))
		!read(prod_str,*)  prod_test

		write(char1,'(F39.36)') real(Pf2P(1)); write(char2,'(I4)') int(real(Pf2P(2)))
		pf2p_str=char1//'E'//trim(adjustl(char2))
		read(pf2p_str,*) pf2p_real
	!	write(*,*) 'prod_test'
	!	write(*,*) prod_test
	!	write(*,*) 'pf2p_real'
	!	write(*,*) pf2p_real
		pf2p_real=abs(abs(Pf2p_real)-prod_test)/prod_test
		!write(*,*) 'Rel err pf2p'
		!write(*,*) pf2p_real
		write(pf2p_str,'(ES43.36)') pf2p_real
	!	write(*,*) 'pf2p_str'
	!	write(*,*) pf2p_str
	!	pf2p_str=pf2p_str(1:39)//'E'//pf2p_str(index(pf2p_str,'E')+1:len_trim(pf2p_str))
	!	write(*,*) 'pf2p_str'
	!	write(*,*) pf2p_str

		pf2h_real=real(Pf2h(1))*10**real(Pf2h(2))
	!	write(*,*) 'pf2h_real'
	!	write(*,*) pf2h_real
		pf2h_real=abs(abs(Pf2h_real)-prod_test)/prod_test
	!	write(*,*) 'Rel err pf2h'
	!	write(*,*) pf2h_real
		write(pf2h_str,'(ES43.36)') pf2h_real
		!write(*,*) pf2h_str
	!	pf2h_str=pf2h_str(1:39)//'E'//pf2h_str(index(pf2h_str(3:len(pf2h_str)),'-')+2:len_trim(pf2h_str))
		
!		write(*,*) 'Pf'
!		write(*,*) real(Pf)
		Pf=abs(abs(Pf)-prod_test)/prod_test
	!	write(*,*) 'Rel err pf'
	!	write(*,*) real(Pf)
		write(pf_str,'(ES43.36)') real(Pf)
	!	pf_str=trim(adjustl(pf_str))
	!	pf_str=pf_str(1:18)//'E'//pf_str(index(pf_str(3:len(pf_str)),'-')+2:len_trim(pf_str))

! Writes product calculation, and pfaffian using: robledo, pfa_parlett-reid, pfa_householder
		!write(*,'(I4,ES51.36)') N_mult , prod_test
		write(1,'(I4,4A45)') N_mult , prod_str,pf_str, pf2p_str, pf2h_str
		!write(1,'(I4,5A,3(ES48.38,A5))') N_mult ,char(9), prod_test,char(9), abs(abs(Pf)-prod_test)&
		!	, char(9),abs(abs(pf2h_real)-prod_test), char(9)!,abs(abs(Pf2p_real)-prod_test)
! -----------------------------------------------------------------------------------------------------------------------
		write(prod_str,'(ES43.36)') prod_test
		!prod_str=prod_str(1:18)//'E'//prod_str(index(prod_str(3:len(prod_str)),'-')+2:len_trim(prod_str))
		!read(prod_str,*)  prod_test

		write(char1,'(F39.36)') real(Pf2P(1)); write(char2,'(I4)') int(real(Pf2P(2)))
		pf2p_str=char1//'E'//trim(adjustl(char2))
		read(pf2p_str,*) pf2p_real
		pf2p_real=abs(abs(Pf2p_real)-prod_test)/prod_test
		write(pf2p_str,'(ES43.36)') pf2p_real

		!write(char1,'(F39.36)') real(Pf2h(1)); write(char2,'(I4)') int(real(Pf2h(2)))
		!pf2h_str=char1//'E'//trim(adjustl(char2))
		!read(pf2h_str,*) pf2h_real
		pf2h_real=real(Pf2h(1))*10**real(Pf2h(2))
		pf2h_real=abs(abs(Pf2h_real)-prod_test)/prod_test
		!write(*,*) pf2h_real
	 	write(pf2h_str,*) pf2h_real
	 	!write(pf2h_str,'(ES43.36)') pf2h_real
		!write(*,*) pf2h_str
		!write(*,*) pf2h_str(1:index(pf2h_str,'E')-1)
		!pf2h_str=pf2h_str(1:39)//'E'//pf2h_str(index(pf2h_str,'E')+1:len_trim(pf2h_str))
		!write(*,*) pf2h_str
		!pf2h_str=char1//'E'//trim(adjustl(char2))
		!write(pf2h_str,'(ES43.36)') pf2h_real
	!	
		Pf=abs(abs(Pf)-prod_test)/prod_test
		write(pf_str,'(ES43.36)') real(Pf)

! Writes product calculation, and pfaffian using: robledo, pfa_parlett-reid, pfa_householder
		!write(*,'(I4,ES51.36)') N_mult , prod_test
		write(*,'(I4,3A45,A50)') N_mult , prod_str,pf_str, pf2p_str, pf2h_str
		write(1,'(I4,3A45,A50)') N_mult , prod_str,pf_str, pf2p_str, pf2h_str
		!write(1,'(I4,5A,3(ES48.38,A5))') N_mult ,char(9), prod_test,char(9), abs(abs(Pf)-prod_test)&
		!	, char(9),abs(abs(pf2h_real)-prod_test), char(9)!,abs(abs(Pf2p_real)-prod_test)


# ----------------------------------------------------------------------

#            Targets
# ----------------------------------------------------------------------
# "make" will build all
all: $(MAIN)
	
$(MAIN):$(OBJECTS) 
	$(FC) $(FFLAGS) $(PFAFLAGS) $(MFLAG) -o $(patsubst %.f90,%,$@) $? $@ $(LIBS) -lpfapack
%.o: %.f90
	$(FC) $(FFLAGS) $(LIBS) $(MFLAG) -c $<  -o $@
# Utility targets
clean: 
	rm -f $(OBJ_DIR)/*.o $(MOD_DIR)/*.mod *.o *.mod $(MAIN_TARGET)
------ PRJECTION------------

!------ DMAT TEST -------
	DMAT=DMAT_CREATOR(0d0,N_tot)
	do i=1,N_tot
		do j=1,N_tot
			if ((DMAT(i,j)/=cmplx(0,0,16)) .AND. (DMAT(i,j)/=cmplx(1,0,16))) then
				write(*,*) i,j
				write(*,*) DMAT(i,j)
			end if 
		end do 
	end do 

!-------- WW creator test ------------
!	WW_D(1:N_tot,1:N_tot) = matmul(transpose(V_N),U_N)
!	WW_D((N_tot+1):(2*N_tot),1:N_tot) = -matmul(transpose(conjg(V_N)),matmul(transpose(DMAT),V_N))
!	WW_D(1:N_tot,(N_tot+1):2*N_tot) = matmul(transpose(V_N),matmul(DMAT,conjg(V_N)))
!	WW_D((N_tot+1):(2*N_tot),(N_tot+1):(2*N_tot)) = matmul(transpose(conjg(U_N)),conjg(V_N))
!
!	WW_N(1:N_tot,1:N_tot) = matmul(transpose(V_N),U_N)
!	WW_N(N_tot+1:2*N_tot,1:N_tot) = -matmul(transpose(V_N),V_N)
!	WW_N(1:N_tot,N_tot+1:2*N_tot) = matmul(transpose(V_N),V_N)
!	WW_N(N_tot+1:2*N_tot,N_tot+1:2*N_tot) = matmul(transpose(U_N),V_N)
!
!	do i=1,2*N_tot
!		do j=1,2*N_tot
!			if (WW_D(i,j) /= WW_N(i,j)) then 
!				write(*,*) i,j
!				write(*,*) 'WW_D', WW_D(i,j)
!				write(*,*) 'WW_N', WW_N(i,j)
!			end if
!		end do
!	end do

!---------Pfaffian test---------------------------
!	do i=1,7
!
!		call qpart_creator(nucleus,N,Z,scalefactor(i),U_N,V_N,prod_N,U_Z,V_Z,prod_Z)
!		WW_N = WTW(U_N,V_N,N_tot)
!
!		write(*,*) 'Scalefactor ',scalefactor(i)
!		call ZSKPF10_F95(WW_N,PF2P)
!		write(*,*) real(PF2P(1))*ten_quad**real(PF2P(2))
!		Pf2P=ZSKPF10_OVERLAPP(N_tot,U_N,U_N,V_N,V_N,DMAT)
!		write(*,*) 'Pfaffian : ',real(PF2P(1))*ten_quad**real(PF2P(2))
!		write(*,*) 
!        end do
!-------Test-loop for the particle nbr op exp value

	N_loop=3
	dPhi=2*pi/(2*N_loop+1)	

	N_op=10
	N_exp=22

!--------PROJECTOR TEST ----------
	summ=0
	do i=-1*N_loop,N_loop
		DMAT=DMAT_CREATOR(i*dPhi,N_tot)
		!DMAT=DMAT_CREATOR(0d0,N_tot)
		Pf2P_ol=ZSKPF10_OVERLAPP(N_tot,U_N,U_N,V_N,V_N,DMAT)
		!write(*,*) Pf2P_ol
		summ= summ + 1/(2*PI)*dPhi*exp(cmplx(0,-1*dPhi*i*N_exp,16))*Pf2P_ol
		!summ= summ + 1/(2*PI)*dPhi*exp(cmplx(0,-1*dPhi*i*N_exp,16))*real(PF2P(1))*ten_quad**real(PF2P(2))
		!summ= summ + 1/(2*PI)*dPhi*exp(cmplx(0,-dPhi*i*N_exp,8))*exp(cmplx(0,dPhi*i*N_op,8))

	end do
	


	write(*,*) summ
