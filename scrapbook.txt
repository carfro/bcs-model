
	use BCS
	implicit none
! 	Nucleus, filled using MO_module
	type(Nucleon), dimension(:,:), allocatable :: nucleus
! 	Variables used for analytic solution
	COMPLEX(8) ::   WW(2*N_tot,2*N_tot),A(N_tot,N_tot),B(N_tot,N_tot),&
			C(N_tot,N_tot),WWD(2*N_tot,2*N_tot),WW2(2*24,2*24),&
			Pf2,WW22(2*24,2*24),&
			U_N(N_tot,N_tot),V_N(N_tot,N_tot),U_Z(N_tot,N_tot),V_Z(N_tot,N_tot)

	complex(kind=qp) :: Pf22,Pf
	real(kind=qp) 	:: prod,factor,factor2

	Integer 	:: Ipiv(2*N_tot,2),Ipiv2(2*24,2),Ipiv22(2*24,2),Ipiv3(4,2)

	REAL(8) 	:: scaleFactor(7)

	! Nbr of neutrons/protons and loop integer(s),
	integer :: i,j
	integer :: N,Z,siz,step

!-------Analytical solution using BCS-equations

	step=1000 	! Nbr of points in \lambda vector
	N=24		! Number of NEUTRONS to find
	Z=24 		! Number of PROTONS to find
	tol=0.001	! tolerance to find root

	allocate(nucleus(N_tot,2),EV_N(N_tot,2),EV_Z(N_tot,2))

	call nucleus_creator(N,Z,nucleus)

	scaleFactor = (/0.5d0,0.75d0,1.d0,1.75d0,2.5d0,3d0,4d0/)

	do i=1,7
		call analytic_solve_sweep(nucleus,N,Z,step,tol,&
			EV_N,lam_sN,EV_Z,lam_sZ,scaleFactor(i))
		V_N_tot(:,i) = EV_N(:,2) 	! Contains all v_i^2 
	end do

	U=0;V=0;prod=1;prod2=1;
	do i=1,N_tot,2
		Theta_N(i,:)=(/  (0.5*dacos(-1.d0+2*V_N_tot(i,j)), j=1,7) /)
		Theta_N(i+1,:)=(/  (0.5*dacos(-1.d0+2*V_N_tot(i+1,j)), j=1,7) /)

		if(i+1<=24) then
			prod2=prod2*V_N_tot(i,3)
		end if

		U(i,i)=cmplx(dsin(theta_N(i,3)),0,8)
		U(i+1,i+1)=cmplx(dsin(theta_N(i,3)),0,8)
		if(i+1<=N_tot) then
			prod=prod*V_N_tot(i,3)
			V(i,i+1)=cmplx(dcos(theta_N(i,3)),0,8)
			V(i+1,i)=cmplx(-1*dcos(theta_N(i,3)),0,8)
		end if
		!write(*,*) i, real(U(i,i)), real(V(i,i+1))
	end do
	!write(*,*) real(V(N_tot,N_tot-1)), real(V(N_tot-1,N_tot))
	!write(*,*) Theta_N(330,3), dcos(Theta_N(330,3)) 
	write(*,*) 'Prod (=Pf)', prod
	write(*,*) 'Prod2 (=Pf2)', prod2

	WW2(1:24,1:24) = A(1:24,1:24)
	WW2(24+1:2*24,1:24) = -C(1:24,1:24)
	WW2(1:24,24+1:2*24) = C(1:24,1:24)
	WW2(24+1:2*24,24+1:2*24) = B(1:24,1:24)
	
	WW22=WW2

	open(unit=1,file='data/WW.dat',status='replace')
	open(unit=2,file='data/WWD.dat',status='replace')
	open(unit=3,file='data/A.dat',status='replace')
	open(unit=4,file='data/B.dat',status='replace')
	open(unit=5,file='data/U.dat',status='replace')
	open(unit=6,file='data/V.dat',status='replace')

	WWD=WW+transpose(WW)

	do i=1,2*N_tot
		do j=1,2*N_tot
			if(.not.(abs(WW(i,j))<1.d-5)) then 
				write(1,"(2I5,F18.12)") j,2*N_tot+1-1*i,real(WW(i,j),8) 
			end if

			if(i<=2*24 .and. j<=2*24) then
				if(.not.(abs(WW2(i,j))<1.d-3)) then 
					write(2,"(2I5,F18.12)") j,2*24+1-1*i,real(WW2(i,j),8)
				end if
			end if
			if (i<=N_tot .and. j<=N_tot) then
				if(.not.(abs(A(i,j))<1.d-3)) then 
					!write(3,"(2I5)") j,N_tot+1-1*i
					write(3,"(2I5,F17.12)") j,N_tot+1-1*i, real(A(i,j),8) 
				end if
				if(.not.(abs(B(i,j))<1.d-3)) then 
					write(4,"(2I5)") j,N_tot+1-1*i 
				end if
				if(.not.(abs(U(i,j))<1.d-3)) then 
					write(5,"(2I5,2I5,F18.12)") j,N_tot+1-1*i,i,j,real(U(i,j),8) 
				end if
				if(.not.(abs(V(i,j))<1.d-3)) then 
					write(6,"(2I5,2I5,F18.12)") j,N_tot+1-1*i,i,j,real(V(i,j),8) 
				end if 
			end if 
		end do
	end do
	factor=1
	Pf=overlap_pfaffian(factor,N_tot,N_tot,N_tot,U,U,V,V)
	!call ZPfaffian_EXT(WW,2*N_tot,2*N_tot,Ipiv,Pf)
	call ZPfaffianF(WW2,2*24,2*24,Ipiv2,Pf2)

	call ZPfaffian_EXT(WW22,2*24,2*24,Ipiv22,Pf22)
	
	write(*,*)
	factor2=factor**(N_tot/2)
	write(*,*) 'Pf*factor: ', real(Pf)
	write(*,*) 'factor2: ', real(factor2)
	write(*,*) 'Pf/factor2: ', real(Pf/factor2)
	write(*,*)
	write(*,*) 'Pf2: ', real(Pf2)
	write(*,*) 'Pf22: ', real(Pf22)

	close(unit=1)
	close(unit=2)
	close(unit=3)
	close(unit=4)
	close(unit=5)
	close(unit=6)
	deallocate(nucleus,EV_N)
<<<<<<< 39081309af0c5314a057e32da0b2ba81764cc1d9
<<<<<<< ed64cb91f3bfcf01ea739c71ab7d2bf93469f696
=======
>>>>>>> The pfaffian performance test is now finished. Currently in the process of creating particle nbr projector




!--------------------------------------------------------------------------------------------------------------------------
		write(prod_str,'(ES43.36)') prod_test
		!prod_str=prod_str(1:18)//'E'//prod_str(index(prod_str(3:len(prod_str)),'-')+2:len_trim(prod_str))
		!read(prod_str,*)  prod_test

		write(char1,'(F39.36)') real(Pf2P(1)); write(char2,'(I4)') int(real(Pf2P(2)))
		pf2p_str=char1//'E'//trim(adjustl(char2))
		read(pf2p_str,*) pf2p_real
	!	write(*,*) 'prod_test'
	!	write(*,*) prod_test
	!	write(*,*) 'pf2p_real'
	!	write(*,*) pf2p_real
		pf2p_real=abs(abs(Pf2p_real)-prod_test)/prod_test
		!write(*,*) 'Rel err pf2p'
		!write(*,*) pf2p_real
		write(pf2p_str,'(ES43.36)') pf2p_real
	!	write(*,*) 'pf2p_str'
	!	write(*,*) pf2p_str
	!	pf2p_str=pf2p_str(1:39)//'E'//pf2p_str(index(pf2p_str,'E')+1:len_trim(pf2p_str))
	!	write(*,*) 'pf2p_str'
	!	write(*,*) pf2p_str

		pf2h_real=real(Pf2h(1))*10**real(Pf2h(2))
	!	write(*,*) 'pf2h_real'
	!	write(*,*) pf2h_real
		pf2h_real=abs(abs(Pf2h_real)-prod_test)/prod_test
	!	write(*,*) 'Rel err pf2h'
	!	write(*,*) pf2h_real
		write(pf2h_str,'(ES43.36)') pf2h_real
		!write(*,*) pf2h_str
	!	pf2h_str=pf2h_str(1:39)//'E'//pf2h_str(index(pf2h_str(3:len(pf2h_str)),'-')+2:len_trim(pf2h_str))
		
!		write(*,*) 'Pf'
!		write(*,*) real(Pf)
		Pf=abs(abs(Pf)-prod_test)/prod_test
	!	write(*,*) 'Rel err pf'
	!	write(*,*) real(Pf)
		write(pf_str,'(ES43.36)') real(Pf)
	!	pf_str=trim(adjustl(pf_str))
	!	pf_str=pf_str(1:18)//'E'//pf_str(index(pf_str(3:len(pf_str)),'-')+2:len_trim(pf_str))

! Writes product calculation, and pfaffian using: robledo, pfa_parlett-reid, pfa_householder
		!write(*,'(I4,ES51.36)') N_mult , prod_test
		write(1,'(I4,4A45)') N_mult , prod_str,pf_str, pf2p_str, pf2h_str
		!write(1,'(I4,5A,3(ES48.38,A5))') N_mult ,char(9), prod_test,char(9), abs(abs(Pf)-prod_test)&
		!	, char(9),abs(abs(pf2h_real)-prod_test), char(9)!,abs(abs(Pf2p_real)-prod_test)
! -----------------------------------------------------------------------------------------------------------------------
		write(prod_str,'(ES43.36)') prod_test
		!prod_str=prod_str(1:18)//'E'//prod_str(index(prod_str(3:len(prod_str)),'-')+2:len_trim(prod_str))
		!read(prod_str,*)  prod_test

		write(char1,'(F39.36)') real(Pf2P(1)); write(char2,'(I4)') int(real(Pf2P(2)))
		pf2p_str=char1//'E'//trim(adjustl(char2))
		read(pf2p_str,*) pf2p_real
		pf2p_real=abs(abs(Pf2p_real)-prod_test)/prod_test
		write(pf2p_str,'(ES43.36)') pf2p_real

		!write(char1,'(F39.36)') real(Pf2h(1)); write(char2,'(I4)') int(real(Pf2h(2)))
		!pf2h_str=char1//'E'//trim(adjustl(char2))
		!read(pf2h_str,*) pf2h_real
		pf2h_real=real(Pf2h(1))*10**real(Pf2h(2))
		pf2h_real=abs(abs(Pf2h_real)-prod_test)/prod_test
		!write(*,*) pf2h_real
	 	write(pf2h_str,*) pf2h_real
	 	!write(pf2h_str,'(ES43.36)') pf2h_real
		!write(*,*) pf2h_str
		!write(*,*) pf2h_str(1:index(pf2h_str,'E')-1)
		!pf2h_str=pf2h_str(1:39)//'E'//pf2h_str(index(pf2h_str,'E')+1:len_trim(pf2h_str))
		!write(*,*) pf2h_str
		!pf2h_str=char1//'E'//trim(adjustl(char2))
		!write(pf2h_str,'(ES43.36)') pf2h_real
	!	
		Pf=abs(abs(Pf)-prod_test)/prod_test
		write(pf_str,'(ES43.36)') real(Pf)

! Writes product calculation, and pfaffian using: robledo, pfa_parlett-reid, pfa_householder
		!write(*,'(I4,ES51.36)') N_mult , prod_test
		write(*,'(I4,3A45,A50)') N_mult , prod_str,pf_str, pf2p_str, pf2h_str
		write(1,'(I4,3A45,A50)') N_mult , prod_str,pf_str, pf2p_str, pf2h_str
		!write(1,'(I4,5A,3(ES48.38,A5))') N_mult ,char(9), prod_test,char(9), abs(abs(Pf)-prod_test)&
		!	, char(9),abs(abs(pf2h_real)-prod_test), char(9)!,abs(abs(Pf2p_real)-prod_test)


# ----------------------------------------------------------------------

#            Targets
# ----------------------------------------------------------------------
# "make" will build all
all: $(MAIN)
	
$(MAIN):$(OBJECTS) 
	$(FC) $(FFLAGS) $(PFAFLAGS) $(MFLAG) -o $(patsubst %.f90,%,$@) $? $@ $(LIBS) -lpfapack
%.o: %.f90
	$(FC) $(FFLAGS) $(LIBS) $(MFLAG) -c $<  -o $@
# Utility targets
clean: 
	rm -f $(OBJ_DIR)/*.o $(MOD_DIR)/*.mod *.o *.mod $(MAIN_TARGET)
------ PRJECTION------------

!------ DMAT TEST -------
	DMAT=DMAT_CREATOR(0d0,N_tot)
	do i=1,N_tot
		do j=1,N_tot
			if ((DMAT(i,j)/=cmplx(0,0,16)) .AND. (DMAT(i,j)/=cmplx(1,0,16))) then
				write(*,*) i,j
				write(*,*) DMAT(i,j)
			end if 
		end do 
	end do 

!-------- WW creator test ------------
!	WW_D(1:N_tot,1:N_tot) = matmul(transpose(V_N),U_N)
!	WW_D((N_tot+1):(2*N_tot),1:N_tot) = -matmul(transpose(conjg(V_N)),matmul(transpose(DMAT),V_N))
!	WW_D(1:N_tot,(N_tot+1):2*N_tot) = matmul(transpose(V_N),matmul(DMAT,conjg(V_N)))
!	WW_D((N_tot+1):(2*N_tot),(N_tot+1):(2*N_tot)) = matmul(transpose(conjg(U_N)),conjg(V_N))
!
!	WW_N(1:N_tot,1:N_tot) = matmul(transpose(V_N),U_N)
!	WW_N(N_tot+1:2*N_tot,1:N_tot) = -matmul(transpose(V_N),V_N)
!	WW_N(1:N_tot,N_tot+1:2*N_tot) = matmul(transpose(V_N),V_N)
!	WW_N(N_tot+1:2*N_tot,N_tot+1:2*N_tot) = matmul(transpose(U_N),V_N)
!
!	do i=1,2*N_tot
!		do j=1,2*N_tot
!			if (WW_D(i,j) /= WW_N(i,j)) then 
!				write(*,*) i,j
!				write(*,*) 'WW_D', WW_D(i,j)
!				write(*,*) 'WW_N', WW_N(i,j)
!			end if
!		end do
!	end do

!---------Pfaffian test---------------------------
!	do i=1,7
!
!		call qpart_creator(nucleus,N,Z,scalefactor(i),U_N,V_N,prod_N,U_Z,V_Z,prod_Z)
!		WW_N = WTW(U_N,V_N,N_tot)
!
!		write(*,*) 'Scalefactor ',scalefactor(i)
!		call ZSKPF10_F95(WW_N,PF2P)
!		write(*,*) real(PF2P(1))*ten_quad**real(PF2P(2))
!		Pf2P=ZSKPF10_OVERLAPP(N_tot,U_N,U_N,V_N,V_N,DMAT)
!		write(*,*) 'Pfaffian : ',real(PF2P(1))*ten_quad**real(PF2P(2))
!		write(*,*) 
!        end do
<<<<<<< HEAD
<<<<<<< HEAD

=======
>>>>>>> 0e9e817d846c3b1c1b34c99b7c9d5b690038758f
=======
>>>>>>> 0e9e817d846c3b1c1b34c99b7c9d5b690038758f
!-------Test-loop for the particle nbr op exp value

	N_loop=3
	dPhi=2*pi/(2*N_loop+1)	

	N_op=10
	N_exp=22

!--------PROJECTOR TEST ----------
	summ=0
	do i=-1*N_loop,N_loop
		DMAT=DMAT_CREATOR(i*dPhi,N_tot)
		!DMAT=DMAT_CREATOR(0d0,N_tot)
		Pf2P_ol=ZSKPF10_OVERLAPP(N_tot,U_N,U_N,V_N,V_N,DMAT)
		!write(*,*) Pf2P_ol
		summ= summ + 1/(2*PI)*dPhi*exp(cmplx(0,-1*dPhi*i*N_exp,16))*Pf2P_ol
		!summ= summ + 1/(2*PI)*dPhi*exp(cmplx(0,-1*dPhi*i*N_exp,16))*real(PF2P(1))*ten_quad**real(PF2P(2))
		!summ= summ + 1/(2*PI)*dPhi*exp(cmplx(0,-dPhi*i*N_exp,8))*exp(cmplx(0,dPhi*i*N_op,8))

	end do
	


	write(*,*) summ
<<<<<<< a5b45b79a23fa41c758a09aecee35dee3131b3e9
<<<<<<< 518b4546ef84f0da8a6b6b6dbe2aaec7b0d3de15
<<<<<<< 39081309af0c5314a057e32da0b2ba81764cc1d9
=======
>>>>>>> Last commit was uncomplete. Added libs and scrapbook containing old cod that might be useful
=======
>>>>>>> The pfaffian performance test is now finished. Currently in the process of creating particle nbr projector
=======
=======
<<<<<<< HEAD
<<<<<<< HEAD
>>>>>>> hola

!-------Test-loop for the overlapp pfaffian, should be =1 for U=U', V='V, DMAT=1

	!DMAT=DMAT_CREATOR(0d0,N_tot)
	!do i=1,7
	!	call qpart_creator(nucleus,N,Z,scaleFactor(i),U_N,V_N,prod_N,U_Z,V_Z,prod_Z)
	!	call ZSKPF10_OVERLAPP(Pf2P_ol,N_tot,U_N,U_N,V_N,V_N,DMAT)
	!	call ONISHI_OVERLAP(on_ol,N_tot,U_N,U_N,V_N,V_N,DMAT,0d0)

	!	write(*,*) 'Pairing strength scaled by : ',scaleFactor(i)
	!	write(*,*) 'Pfaffian_olverlap : ', real(Pf2P_ol)
	!	write(*,*) 'Onishi_olverlap : ', real(on_ol)
	!	write(*,*) 
        !end do
!----------------- PROJECTOR TEST 1/2 -------------------------


	DMAT=0
	forall(i=1:cut) DMAT(i,i)=cmplx(1,0,16)
	!write(*,*) shape(DMAT)
	!write (fmt, '(A,I3,A)') '(', cut, 'F6.2)'

	do j=N_exp,N_exp!N_exp-2,N_exp+2
		write(*,*) j
		summ=0
		summ2=0
		!do i=-1*N_loop,N_loop
		do i=0,N_loop
			write(*,*) i , i*dPhi

			!phi_arg=i*dPhi*(0.5*N_exp+40)
			!phi_arg=i*dPhi*(0.5*N_exp+0)
			phi_arg=dPhi

			!DMAT=DMAT_CREATOR(phi_arg,cut)
			!DMAT=DMAT_CREATOR(i*dPhi*cut,cut)
			!forall(i=1:cut) DMAT(i,i)=DMAT(i,i)*exp(cmplx(0,phi_arg,16))
			if(i>0) DMAT=DMAT*exp(cmplx(0,phi_arg*N_exp,16))
			write(*,*) DMAT(1,1)

			!do k=1,cut
			!	do l=1,cut
			!		if((DMAT(k,l) .NE. 0) .AND. (DMAT(k,l) .NE. cmplx(0,i*dPhi,16))) then
			!			write(*,*) DMAT(k,l)
			!		end if
			!	end do
			!end do 

			call ZSKPF10_OVERLAPP(Pf2P_ol,cut,U_test,U_test,V_test,V_test,DMAT,norm)

			ext_ol=ext_pfaffian(cut,U_test,U_test,V_test,V_test,DMAT)

			!DMAT=DMAT_CREATOR(i*dPhi,cut)
			call ONISHI_OVERLAP(on_ol,cut,U_test,U_test,V_test,V_test,DMAT,phi_arg)

			write(2,'(I4,F12.7,3E49.27E4)') i, i*dPhi, real(Pf2P_ol), real(on_ol), real(ext_ol)

		!	summ= summ + dPhi*exp(cmplx(0,-1*i*dPhi*j,16))*Pf2P_ol
		!	summ2= summ2 + dPhi*exp(cmplx(0,-1*i*dPhi*j,16))*exp(cmplx(0,1*dPhi*i*N_exp,16))
		end do


!-------- UV - checks -----------------	

	TMATU=matmul(transpose(conjg(U_test)),U_test)+matmul(transpose(conjg(V_test)),V_test)
	do k=1,cut
		do l=1,cut
			if((TMATU(k,l) /= 0)) write(*,*) TMATU(k,l),k,l 
		end do
	end do 

	TMATU=matmul(U_test,transpose(conjg(U_test)))+matmul(conjg(V_test),transpose(V_test))
	do k=1,cut
		do l=1,cut
			if((TMATU(k,l) /= 0)) write(*,*) TMATU(k,l),k,l 
		end do
	end do 

!----------------------- 4/2 projector ---------------------------------------
! There are some important parts here, just removed them in the real code to make it more readable...

	cut=50

	allocate(nucleus(N_tot,2),U_test(cut,cut),V_test(cut,cut),DMAT(cut,cut))
	call nucleus_creator(N,Z,nucleus)
	call qpart_creator(nucleus,N,Z,scaleFactor(2),U_N,V_N,prod_N,U_Z,V_Z,prod_Z)
	open(unit=1,file='data/part_no_test.dat',status='replace')
	open(unit=2,file='data/overlap_proj_test.dat',status='replace')
	open(unit=3,file='data/det_test.dat',status='replace')

	U_test=U_N(1:cut,1:cut)
	V_test=V_N(1:cut,1:cut)

	!norm=norm_fac(U_test,V_test,cut)
	norm=prod_calc(V_test,cut)

	!N_loop=2*30
	N_loop=10*30*30
	
	N_op=24
	N_exp=2*sum_check(V_test,cut)
	!N_exp=24
	write(*,*) 'sum_check 	', N_exp

	!gillis loop: dPhi=12*PI/(cut*(2*N_loop+1))	
	dPhi=8*4*PI/((cut+N_exp)*(N_loop))	
	phi_arg=dPhi!*N_exp

	DMAT=0
	forall(i=1:cut) DMAT(i,i)=cmplx(1,0,16)

	do j=N_exp,N_exp!N_exp-2,N_exp+2
		write(*,*) j
		summ=0
		summ2=0
		!$OMP PARALLEL DO PRIVATE(DMAT,Pf2P_ol,on_ol) SHARED(U_test,V_test,norm,phi_arg)
		!gillis loop: do i=-1*N_loop,N_loop
		do i=0,N_loop
			!write(*,*) i!, i*dPhi

			if(i>0) DMAT=DMAT*exp(cmplx(0,phi_arg,16))

			call ZSKPF10_OVERLAPP(Pf2P_ol,cut,U_test,U_test,V_test,V_test,DMAT,norm)

			!ext_ol=ext_pfaffian(cut,U_test,U_test,V_test,V_test,DMAT,norm)

			!phi_arg2=dPhi
			!if(i>0) DMAT2=DMAT2*exp(cmplx(0,phi_arg2,16))
			call ONISHI_OVERLAP(on_ol,cut,U_test,U_test,V_test,V_test,DMAT,i*phi_arg)

			write(2,'(I4,F12.7,3E49.27E4)') i, i*dPhi, real(Pf2P_ol), real(on_ol)!, real(ext_ol)

		!	summ= summ + dPhi*exp(cmplx(0,-1*i*dPhi*j,16))*Pf2P_ol
		!	summ2= summ2 + dPhi*exp(cmplx(0,-1*i*dPhi*j,16))*exp(cmplx(0,1*dPhi*i*N_exp,16))
		end do
		!summ=1/(2*PI)*summ
		!write(1,'(I2,3ES48.38)') j,real(summ),real(summ2),real(summ3)
		!if(j .NE. N_exp+2) write(2,'(2/)')
		!write(2,*)
	end do

	deallocate(nucleus,U_test,V_test,DMAT)
	close(unit=1)
	close(unit=2)
	close(unit=3)
end program main


! ---------------------------------------------------------------------------------------------------

		WHERE(AIMAG(WDW)<0.) imag_unit = '-i*'
		do l=1,2*cut
			!write(6,'(100(F41.30,a,F41.30,2x))') (REAL(WDW(l,k)),imag_unit(l,k),ABS(AIMAG(WDW(l,k))),k=1,2*cut)
			write(6,'(100(g23.15,a,g23.15,2x))') (trim(REAL(WDW(l,k))),imag_unit(l,k),ABS(AIMAG(WDW(l,k))),k=1,2*cut)
		end do 	
		write(6,*) 

! ---------------------------------------------------------------------------------------------------

		allocate(lam_vector(step),lam_vector_old(step))
		lam_vector=linspace( lower_energy(nucleus(:,1),N),&
			higher_energy(nucleus(:,1),N),step)

		DO i=1,step
			write(1,*) i

			siz = size(lam_vector,1)
			midP=ceiling(siz/2d0)
			!allocate(lam_vector_old(siz))
			!lam_vector_old=lam_vector(1:siz)

			lam_sN=lam_vector(midP)
			!write(*,*) 'midP 	lam_sN'
			!write(*,*) midP,lam_sN
			write(1,*) 'lam_vector(1) 	',lam_vector(1)
			write(1,*) 'lam_vector(siz) 	',lam_vector(siz)
			!write(*,*) lam_vector

			EV_N = analytic_EV(nucleus(:,1),deltaR,lam_sN,N)
			Vsum=sum(EV_N(:,2),1)

			write(1,*) 'Vsum' , Vsum

			if (abs(Vsum-N)<tol) then
				write(*,*) 'proper exit'
			       	exit 
			else if (Vsum>N) then
				if(midP==1) exit
				!write(*,*) 'below'
				!deallocate(lam_vector)
				!allocate(lam_vector(midP-1))
				!lam_vector=lam_vector_old(1:midP-1)	       
				lam_vector=linspace(lam_vector(1),&
				lam_vector(midP),step)
				!deallocate(lam_vector_old)
			else
				if(midP==siz) exit
				!write(*,*) 'above',lam_vector(midP+1)
				!write(*,*) lam_vector(midP+5)
				!deallocate(lam_vector)
				!allocate(lam_vector(siz-midP))
				!lam_vector=lam_vector_old(midP+1:siz)
				lam_vector_old=linspace(lam_vector(midP),&
				lam_vector(size(lam_vector,1)),step)
				lam_vector=lam_vector_old				
				!write(*,*) lam_vector(2)
				!deallocate(lam_vector_old)
			end if
		if(allocated(lam_vector)) deallocate(lam_vector)
		if(allocated(lam_vector_old)) deallocate(lam_vector_old)

		allocate(lam_vector(step))
		lam_vector=linspace( lower_energy(nucleus(:,2),z),&
			higher_energy(nucleus(:,2),z),step)

		do i=1,step
			siz = size(lam_vector,1)
			midp=ceiling(siz/2d0)
			allocate(lam_vector_old(siz))
			lam_vector_old=lam_vector(1:siz)
			lam_sz=lam_vector(midp)

			ev_z = analytic_ev(nucleus(:,2),deltar,lam_sz,z)
			vsum=sum(ev_z(:,2),1)

			if (abs(vsum-z)<tol) then
			       	exit 
			else if (vsum>z) then
				if(midp==1) exit
				deallocate(lam_vector)
				allocate(lam_vector(midp-1))
				lam_vector=lam_vector_old(1:midp-1)	       
				deallocate(lam_vector_old)
			else
				if(midp==siz) exit
				deallocate(lam_vector)
				allocate(lam_vector(siz-midp))
				lam_vector=lam_vector_old(midp+1:siz)
				deallocate(lam_vector_old)
			end if
		



!-------------------------13/2 Test-loop for the particle nbr op exp value ----------------------------------

	allocate(nucleus(cut,2),U_N(cut,cut),V_N(cut,cut),U_Z(cut,cut),V_Z(cut,cut),DMAT(cut,cut),WDW(2*cut,2*cut))

	call nucleus_creator(N,Z,cut,nucleus)
	call qpart_creator(nucleus,N,Z,cut,1d0,U_N,V_N,prod_N,U_Z,V_Z,prod_Z)
! 	overlap testing files
	open(unit=2,file='data/part_no/overlap_proj_test.dat',status='replace')
	open(unit=9,file='data/part_no/overlap_real.dat',status='replace')
	open(unit=10,file='data/part_no/overlap_imag.dat',status='replace')
! 	det test
	open(unit=3,file='data/part_no/det_test.dat',status='replace')
! 	U,V matrices
	open(unit=4,file='matlab/U_mat.dat',status='replace')
	open(unit=5,file='matlab/V_mat.dat',status='replace')
! 	W matrices
	open(unit=6,file='matlab/W_r_mat.dat',status='replace')
	open(unit=7,file='matlab/W_i_mat.dat',status='replace')
	!open(unit=7,file='data/X_mat.dat',status='replace')
	open(unit=8,file='matlab/W_mat.dat',status='replace')

	do l=1,cut
		write(4,'(100F41.30)') (real(U_N(l,k)),k=1,cut)
	end do 	
	do l=1,cut
		write(5,'(100F41.30)') (real(V_N(l,k)),k=1,cut)
	end do 	

	norm=prod_calc(V_N,cut)
	write(*,*) 'norm 	', norm

	N_loop=5*30*30
	
	N_exp=2*sum_check(V_N,cut)
	write(*,*) 'sum_check 	', N_exp

	dPhi=4*4*PI/((cut+N_exp)*(N_loop))	
	phi_arg=dPhi!*N_exp

	!DMAT=0
	!forall(i=1:cut) DMAT(i,i)=cmplx(1,0,16)

	!!$OMP PARALLEL DO PRIVATE(DMAT,Pf2P_ol,on_ol) SHARED(U_test,V_test,norm,phi_arg)
	!$OMP PARALLEL DO DEFAULT(PRIVATE) SHARED(norm,phi_arg)
	!do i=0.25*N_loop,0.25*N_loop
	do i=0,N_loop
		write(*,*) i!, i*dPhi

		if(i>0) DMAT=DMAT*exp(cmplx(0,i*phi_arg,16))
		!if(i>0) DMAT=DMAT*exp(cmplx(0,phi_arg,16))

		!U_test=U_N(1:cut,1:cut)
		!V_test=V_N(1:cut,1:cut)

		WDW=WD(U_N,U_N,V_N,V_N,DMAT,cut)
		!WHERE(AIMAG(WDW)<0.) imag_unit = '-'
		!WHERE(AIMAG(WDW)<0.) imag_unit = '-i*'

		!do l=1,2*cut
		!	!write(8,'(100(g23.15,a,g23.15,a))') (REAL(WDW(l,k)),imag_unit(l,k),ABS(AIMAG(WDW(l,k))),',',k=1,2*cut)
		!	!write(8,'(100(g23.15,a,g23.15,a))') (REAL(WDW(l,k)),imag_unit(l,k),ABS(AIMAG(WDW(l,k))),'i,',k=1,2*cut)
		!	write(6,'(100(F23.15))') (REAL(WDW(l,k)),k=1,2*cut)
		!	write(7,'(100(F23.15))') (AIMAG(WDW(l,k)),k=1,2*cut)
		!end do 	
		!write(6,*); write(7,*); write(8,*) 

		!call ZSKPF10_OLPP(Pf2P_ol,cut,U_test,U_test,V_test,V_test,DMAT,norm)
		call ZSKPF10_MOLP(Pf2P_ol,cut,WDW,norm)

		ext_ol=ext_pfaffian(cut,U_N,U_N,V_N,V_N,DMAT,norm)
		
		!U_test=U_N(1:cut,1:cut)
		!V_test=V_N(1:cut,1:cut)

		!phi_arg2=dPhi
		!if(i>0) DMAT2=DMAT2*exp(cmplx(0,phi_arg2,16))
		call ONISHI_OVERLAP(on_ol,cut,U_N,U_N,V_N,V_N,DMAT,i*phi_arg)

		write(2,'(I6,F12.7,3E52.35E6)') i, i*dPhi, abs(Pf2P_ol), abs(on_ol), abs(ext_ol)
		write(9,'(I6,F12.7,3E52.35E6)') i, i*dPhi, real(Pf2P_ol), real(on_ol), real(ext_ol)
		write(10,'(I6,F12.7,3E52.35E6)') i, i*dPhi, aimag(Pf2P_ol), aimag(on_ol), aimag(ext_ol)
	end do
	!$OMP END PARALLEL DO




!------------------------------------- LOOOP CLEAN-UP 20/2 ----------------------------------
!------------------------- Test-loop for the particle nbr op exp value ----------------------------------

	allocate(nucleus(cut,2),U_N(cut,cut),V_N(cut,cut),U_Z(cut,cut),&
		V_Z(cut,cut),DMAT(cut,cut),WDW(2*cut,2*cut),EYE(cut,cut))

	call nucleus_creator(N,Z,cut,nucleus)
	call qpart_creator(nucleus,N,Z,cut,scaleFactor(1),U_N,V_N,prod_N,U_Z,V_Z,prod_Z)

! 	overlap testing files
	open(unit=2,file='data/part_no/overlap_proj_test.dat',status='replace')
	open(unit=9,file='data/part_no/overlap_real.dat',status='replace')
	open(unit=10,file='data/part_no/overlap_imag.dat',status='replace')
	open(unit=11,file='data/part_no/sum.dat',status='replace')

! 	det test
	!open(unit=3,file='data/part_no/det_test.dat',status='replace')

! 	U,V matrices
	!open(unit=4,file='matlab/U_mat.dat',status='replace')
	!open(unit=5,file='matlab/V_mat.dat',status='replace')
	!do l=1,cut
	!	write(4,'(100F41.30)') (real(U_N(l,k)),k=1,cut)
	!end do 	
	!do l=1,cut
	!	write(5,'(100F41.30)') (real(V_N(l,k)),k=1,cut)
	!end do 	

	norm=prod_calc(V_N,cut)
	write(*,*) 'norm 	', norm

	N_loop=10!*20 	!5*30*30
	allocate(Vsumm(N_loop),Vsumm2(N_loop),Vsumm3(N_loop))
	
	N_exp=2*sum_check(V_N,cut)
	write(*,*) 'sum_check 	', N_exp

	!dPhi=4*4*PI/((cut+N_exp)*(2*N_loop+1))	
	dPhi=2*PI/(2*N_loop+1)	
	!phi_arg=dPhi!*N_exp

	WDW=0
	DMAT=0
	EYE=0

	Pf2P_ol=0
	ext_ol=0
	on_ol=0

	forall(i=1:cut) EYE(i,i)=cmplx(1,0,16)

	do j=ceiling(N_exp)-6,ceiling(N_exp)+6
		write(*,*) j
		Vsumm=0
		Vsumm2=0
		Vsumm3=0

		!!$OMP PARALLEL DO DEFAULT(PRIVATE) SHARED(DMAT,EYE,U_N,V_N,norm,N_loop,phi_arg)
		!do i=0.25*N_loop,0.25*N_loop
		do i=-1*N_loop,N_loop
			!write(*,*) i!, i*dPhi

			DMAT=EYE*exp(cmplx(0,i*dPhi,16))
			!if(i>0) DMAT=DMAT*exp(cmplx(0,dPhi,16))

			WDW=WD(U_N,U_N,V_N,V_N,DMAT,cut)

			call ZSKPF10_MOLP(Pf2P_ol,cut,WDW,norm)
			!call ZSKPF10_OLP(Pf2P_ol,N,U_N,U_N,V_N,V_N,DMAT,norm)

			ext_ol=ext_pfaffian(cut,U_N,U_N,V_N,V_N,DMAT,norm)
			
			call ONISHI_OVERLAP(on_ol,cut,U_N,U_N,V_N,V_N,DMAT,i*dPhi)

			!write(2,'(I6,F12.7,3E52.35E6)') i, i*dPhi, abs(Pf2P_ol), abs(on_ol), abs(ext_ol)
			!write(9,'(I6,F12.7,3E52.35E6)') i, i*dPhi, real(Pf2P_ol), real(on_ol), real(ext_ol)
			!write(10,'(I6,F12.7,3E52.35E6)') i, i*dPhi, aimag(Pf2P_ol), aimag(on_ol), aimag(ext_ol)

			Vsumm(i+N_loop+1) 	= 	dPhi*exp(cmplx(0,-1*i*dPhi*j,16))*Pf2P_ol
			Vsumm2(i+N_loop+1) 	= 	dPhi*exp(cmplx(0,-1*i*dPhi*j*0.5,16))*on_ol
			!Vsumm3(i+N_loop+1) = 	dPhi*exp(cmplx(0,-1*i*dPhi*j*0.5,16))*on_ol
			y(i+N_loop+1) 		= 	Vsumm(i+N_loop+1) 	
			y2(i+N_loop+1) 		= 	Vsumm2(i+N_loop+1) 	
		end do
		!!$OMP END PARALLEL DO

		summ = 1/(2*PI)*sum(Vsumm)	
		summ2 = 1/(2*PI)*sum(Vsumm2)
		!summ3 = 1/(2*N_loop+1)*sum(Vsumm3)
 		y=y*1/(summ)
 		y2=y2*1/(summ2)
 		

		write(11,'(I6,5E52.35E6)') j, abs(summ),abs(summ2),abs(summ3)
		if(aimag(summ) > 0) write(*,*) summ
		write(*,*) 'done'
	end do

 	deallocate(nucleus,U_N,V_N,U_Z,V_Z,DMAT,WDW,EYE)
	close(unit=2)
	close(unit=3)








<<<<<<< a5b45b79a23fa41c758a09aecee35dee3131b3e9
>>>>>>> Moved matrix routines to module mroutines. Working on the expectation value of particle nbr op.
=======
=======
>>>>>>> 0e9e817d846c3b1c1b34c99b7c9d5b690038758f
=======
>>>>>>> 0e9e817d846c3b1c1b34c99b7c9d5b690038758f
>>>>>>> hola
