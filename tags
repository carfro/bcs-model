!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
100	modules/MO_module.f90	/^		100 format (a,i3,a9,i3,i9,i5,i5,a2,i5,a2,i5,a2,f14.2) 	$/;"	l	subroutine:print_n	file:
100	modules/MO_module.f90	/^		100 format (a,i3,a9,i3,i9,i5,i5,a2,i5,a2,i5,a2,f14.2)$/;"	l	subroutine:print_nucleus	file:
9998	modules/MO_module.f90	/^	 9998 FORMAT( 11(:,1X,'(',F6.2,',',F6.2,')') )$/;"	l	subroutine:PRINT_MATRIX	file:
9998	modules/MO_module.f90	/^	 9998 FORMAT( 11(:,1X,F6.2) )$/;"	l	subroutine:PRINT_RMATRIX	file:
BCS	BCSmodel.f90	/^module BCS$/;"	m
E	modules/MO_module.f90	/^		real :: E$/;"	k	type:Nucleon
Exch	modules/pfaffianAFP_DEF.f90	/^Subroutine Exch(/;"	s
FC	makefile	/^FC=ifort$/;"	m
FLAGS	makefile	/^FLAGS= -g -check all -fp-stack-check -heap-arrays $(IFLAGS)$/;"	m
IFLAGS	makefile	/^IFLAGS=-I$(MOD_DIR) -I$(PFAPATH) $(PFAPATH)\/libpfapack.a$/;"	m
Ipiv	BCSmodel.f90	/^	Integer 	:: Ipiv(/;"	v	program:main
Ipiv2	BCSmodel.f90	/^	Integer 	:: Ipiv(2*N_tot,2),Ipiv2(/;"	v	program:main
Ipiv22	BCSmodel.f90	/^	Integer 	:: Ipiv(2*N_tot,2),Ipiv2(2*24,2),Ipiv22(/;"	v	program:main
Ipiv3	BCSmodel.f90	/^	Integer 	:: Ipiv(2*N_tot,2),Ipiv2(2*24,2),Ipiv22(2*24,2),Ipiv3(/;"	v	program:main
LIBS	makefile	/^LIBS= -mkl -Wl,-rpath,$(MKLPATH) -lmkl_core -lmkl_intel_thread -lmkl_intel_lp64 -liomp5 $/;"	m
MAIN	makefile	/^MAIN= BCSmodel.f90$/;"	m
MFLAG	makefile	/^MFLAG=-module $(MOD_DIR)$/;"	m
MKLPATH	makefile	/^MKLPATH=\/opt\/intel\/compilers_and_libraries_2019.1.144\/mac\/mkl\/lib $/;"	m
MOD_DIR	makefile	/^MOD_DIR=modules$/;"	m
MO_module	modules/MO_module.f90	/^module MO_module /;"	m
N	BCSmodel.f90	/^	integer :: N,/;"	v	program:main
N	modules/MO_module.f90	/^		integer :: N$/;"	k	type:Nucleon
N_tot	BCSmodel.f90	/^	integer, parameter :: N_tot=/;"	v	module:BCS
Nucleon	modules/MO_module.f90	/^	type, public :: Nucleon$/;"	t	module:MO_module
OBJECTS	makefile	/^OBJECTS:=$(OBJECTS_SRCS:%.f90=%.o)$/;"	m
OBJECTS_SRCS	makefile	/^OBJECTS_SRCS:=$(wildcard $(OBJ_DIR)\/*.f90)$/;"	m
OBJ_DIR	makefile	/^OBJ_DIR=$(MOD_DIR)$/;"	m
PFAPATH	makefile	/^PFAPATH=\/Users\/carlfrostenson\/Documents\/1_UNI\/1_MasterThesis\/Fortran\/Routines\/Pfaffian\/pfapack\/fortran$/;"	m
PRINT_MATRIX	modules/MO_module.f90	/^	subroutine PRINT_MATRIX(/;"	s	module:MO_module
PRINT_RMATRIX	modules/MO_module.f90	/^	subroutine PRINT_RMATRIX(/;"	s	module:MO_module
Pf	BCSmodel.f90	/^	complex(kind=qp) :: Pf2/;"	v	program:main
Pf2	BCSmodel.f90	/^	COMPLEX(8) :: 	Pf2,/;"	v	program:main
Pf22	BCSmodel.f90	/^	complex(kind=qp) :: Pf22,/;"	v	program:main
PfaffianF	modules/pfaffianAFP_DEF.f90	/^Subroutine PfaffianF(/;"	s
U_N	BCSmodel.f90	/^			U_N(/;"	v	program:main
U_Z	BCSmodel.f90	/^			U_Z(/;"	v	program:main
V_N	BCSmodel.f90	/^			U_N(N_tot,N_tot),V_N(/;"	v	program:main
V_Z	BCSmodel.f90	/^			U_Z(N_tot,N_tot),V_Z(/;"	v	program:main
WTW	BCSmodel.f90	/^	FUNCTION WTW(/;"	f	module:BCS
WW_N	BCSmodel.f90	/^	COMPLEX(8) :: 	Pf2,WW_N(/;"	v	program:main
Z	BCSmodel.f90	/^	integer :: N,Z,/;"	v	program:main
ZExch	modules/pfaffianAFP_DEF.f90	/^Subroutine ZExch(/;"	s
ZExch	modules/pfaffian_module.f90	/^	Subroutine ZExch(/;"	s	module:pfaffian_module
ZExch_ext	modules/pfaffian_extended.f90	/^Subroutine ZExch_ext(/;"	s
ZExch_ext	modules/pfaffian_module.f90	/^	Subroutine ZExch_ext(/;"	s	module:pfaffian_module
ZPfaffianF	modules/pfaffianAFP_DEF.f90	/^Subroutine ZPfaffianF(/;"	s
ZPfaffianF	modules/pfaffian_module.f90	/^	Subroutine ZPfaffianF(/;"	s	module:pfaffian_module
ZPfaffian_EXT	modules/pfaffian_extended.f90	/^Subroutine ZPfaffian_EXT(/;"	s
ZPfaffian_EXT	modules/pfaffian_module.f90	/^	Subroutine ZPfaffian_EXT(/;"	s	module:pfaffian_module
analytic_EV	modules/analytic_module.f90	/^	function analytic_EV(/;"	f	module:analytic_module
analytic_module	modules/analytic_module.f90	/^module analytic_module$/;"	m
analytic_solve_sweep	modules/analytic_module.f90	/^	subroutine analytic_solve_sweep(/;"	s	module:analytic_module
energy	modules/MO_module.f90	/^	subroutine energy(/;"	s	module:MO_module
factor	BCSmodel.f90	/^	real(kind=qp) 	:: factor$/;"	v	program:main
hbar_omega	modules/MO_module.f90	/^	function hbar_omega(/;"	f	module:MO_module
higher_energy	modules/analytic_module.f90	/^	function higher_energy(/;"	f	module:analytic_module
j	modules/MO_module.f90	/^		integer :: j$/;"	k	type:Nucleon
l	modules/MO_module.f90	/^		integer :: l$/;"	k	type:Nucleon
linspace	modules/analytic_module.f90	/^	function linspace(/;"	f	module:analytic_module
lower_energy	modules/analytic_module.f90	/^	function lower_energy(/;"	f	module:analytic_module
main	BCSmodel.f90	/^program main$/;"	p
nucleus	BCSmodel.f90	/^	type(Nucleon), dimension(:,:), allocatable :: nucleus$/;"	v	program:main
nucleus_creator	modules/MO_module.f90	/^	subroutine nucleus_creator(/;"	s	module:MO_module
nucleus_extractor	modules/MO_module.f90	/^	function nucleus_extractor(/;"	f	module:MO_module
ome	modules/MO_module.f90	/^		integer :: ome$/;"	k	type:Nucleon
overlap_pfaffian	modules/pfaffian_module.f90	/^	FUNCTION overlap_pfaffian(/;"	f	module:pfaffian_module
pfaffian_module	modules/pfaffian_module.f90	/^module pfaffian_module /;"	m
print_n	modules/MO_module.f90	/^	subroutine print_n(/;"	s	module:MO_module
print_nucleus	modules/MO_module.f90	/^	subroutine print_nucleus(/;"	s	module:MO_module
prod_N	BCSmodel.f90	/^	complex(kind=qp) :: Pf22,Pf,prod_N,/;"	v	program:main
prod_Z	BCSmodel.f90	/^	complex(kind=qp) :: Pf22,Pf,prod_N,prod_Z$/;"	v	program:main
q	modules/MO_module.f90	/^		integer :: q$/;"	k	type:Nucleon
qntm_nbrs	modules/MO_module.f90	/^	subroutine qntm_nbrs(/;"	s	module:MO_module
qp	modules/pfaffian_module.f90	/^	integer, parameter 	:: qp /;"	v	module:pfaffian_module
qpart_creator	BCSmodel.f90	/^	Subroutine qpart_creator(/;"	s	module:BCS
quicksort_energy	modules/MO_module.f90	/^	recursive subroutine quicksort_energy(/;"	s	module:MO_module
quicksort_ome	modules/MO_module.f90	/^	recursive subroutine quicksort_ome(/;"	s	module:MO_module
s	modules/MO_module.f90	/^		integer :: s$/;"	k	type:Nucleon
scaleFactor	BCSmodel.f90	/^	REAL(8) 	:: scaleFactor(/;"	v	program:main
siz	BCSmodel.f90	/^	integer :: N,Z,siz,/;"	v	program:main
step	BCSmodel.f90	/^	integer :: N,Z,siz,step$/;"	v	program:main
